// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: basic.proto

package restaurant

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _basic_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Empty) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// EmptyValidationError is the validation error returned by Empty.Validate if
// the designated constraints aren't met.
type EmptyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyValidationError) ErrorName() string { return "EmptyValidationError" }

// Error satisfies the builtin error interface
func (e EmptyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmpty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyValidationError{}

// Validate checks the field values on Name with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Name) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for En

	// no validation rules for Ja

	return nil
}

// NameValidationError is the validation error returned by Name.Validate if the
// designated constraints aren't met.
type NameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NameValidationError) ErrorName() string { return "NameValidationError" }

// Error satisfies the builtin error interface
func (e NameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NameValidationError{}

// Validate checks the field values on Description with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Description) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for En

	// no validation rules for Ja

	return nil
}

// DescriptionValidationError is the validation error returned by
// Description.Validate if the designated constraints aren't met.
type DescriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescriptionValidationError) ErrorName() string { return "DescriptionValidationError" }

// Error satisfies the builtin error interface
func (e DescriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescriptionValidationError{}

// Validate checks the field values on Id with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Id) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// IdValidationError is the validation error returned by Id.Validate if the
// designated constraints aren't met.
type IdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdValidationError) ErrorName() string { return "IdValidationError" }

// Error satisfies the builtin error interface
func (e IdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdValidationError{}

// Validate checks the field values on RestId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RestId) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RestId

	return nil
}

// RestIdValidationError is the validation error returned by RestId.Validate if
// the designated constraints aren't met.
type RestIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestIdValidationError) ErrorName() string { return "RestIdValidationError" }

// Error satisfies the builtin error interface
func (e RestIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestIdValidationError{}

// Validate checks the field values on RestGroupId with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RestGroupId) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RestGroupId

	return nil
}

// RestGroupIdValidationError is the validation error returned by
// RestGroupId.Validate if the designated constraints aren't met.
type RestGroupIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestGroupIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestGroupIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestGroupIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestGroupIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestGroupIdValidationError) ErrorName() string { return "RestGroupIdValidationError" }

// Error satisfies the builtin error interface
func (e RestGroupIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestGroupId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestGroupIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestGroupIdValidationError{}

// Validate checks the field values on TaxId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TaxId) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TaxId

	return nil
}

// TaxIdValidationError is the validation error returned by TaxId.Validate if
// the designated constraints aren't met.
type TaxIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaxIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaxIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaxIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaxIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaxIdValidationError) ErrorName() string { return "TaxIdValidationError" }

// Error satisfies the builtin error interface
func (e TaxIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaxId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaxIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaxIdValidationError{}

// Validate checks the field values on CurrencyId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CurrencyId) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CurrencyId

	return nil
}

// CurrencyIdValidationError is the validation error returned by
// CurrencyId.Validate if the designated constraints aren't met.
type CurrencyIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CurrencyIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CurrencyIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CurrencyIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CurrencyIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CurrencyIdValidationError) ErrorName() string { return "CurrencyIdValidationError" }

// Error satisfies the builtin error interface
func (e CurrencyIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCurrencyId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CurrencyIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CurrencyIdValidationError{}
