// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tax.proto

package restaurant

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OrderType int32

const (
	OrderType_DINEIN      OrderType = 0
	OrderType_TAKEAWAY    OrderType = 1
	OrderType_AGGREGATORS OrderType = 2
	OrderType_QSR         OrderType = 3
)

var OrderType_name = map[int32]string{
	0: "DINEIN",
	1: "TAKEAWAY",
	2: "AGGREGATORS",
	3: "QSR",
}

var OrderType_value = map[string]int32{
	"DINEIN":      0,
	"TAKEAWAY":    1,
	"AGGREGATORS": 2,
	"QSR":         3,
}

func (x OrderType) String() string {
	return proto.EnumName(OrderType_name, int32(x))
}

func (OrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dc148b98924644b2, []int{0}
}

type Tax struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RestId               string               `protobuf:"bytes,2,opt,name=rest_id,json=restId,proto3" json:"rest_id,omitempty"`
	Name                 *Name                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Inclusive            bool                 `protobuf:"varint,4,opt,name=inclusive,proto3" json:"inclusive,omitempty"`
	IsPercentage         bool                 `protobuf:"varint,5,opt,name=is_percentage,json=isPercentage,proto3" json:"is_percentage,omitempty"`
	Value                float32              `protobuf:"fixed32,6,opt,name=value,proto3" json:"value,omitempty"`
	OrderTypes           []OrderType          `protobuf:"varint,7,rep,packed,name=order_types,json=orderTypes,proto3,enum=restaurant.OrderType" json:"order_types,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Tax) Reset()         { *m = Tax{} }
func (m *Tax) String() string { return proto.CompactTextString(m) }
func (*Tax) ProtoMessage()    {}
func (*Tax) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc148b98924644b2, []int{0}
}

func (m *Tax) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tax.Unmarshal(m, b)
}
func (m *Tax) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tax.Marshal(b, m, deterministic)
}
func (m *Tax) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tax.Merge(m, src)
}
func (m *Tax) XXX_Size() int {
	return xxx_messageInfo_Tax.Size(m)
}
func (m *Tax) XXX_DiscardUnknown() {
	xxx_messageInfo_Tax.DiscardUnknown(m)
}

var xxx_messageInfo_Tax proto.InternalMessageInfo

func (m *Tax) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Tax) GetRestId() string {
	if m != nil {
		return m.RestId
	}
	return ""
}

func (m *Tax) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Tax) GetInclusive() bool {
	if m != nil {
		return m.Inclusive
	}
	return false
}

func (m *Tax) GetIsPercentage() bool {
	if m != nil {
		return m.IsPercentage
	}
	return false
}

func (m *Tax) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Tax) GetOrderTypes() []OrderType {
	if m != nil {
		return m.OrderTypes
	}
	return nil
}

func (m *Tax) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Tax) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func init() {
	proto.RegisterEnum("restaurant.OrderType", OrderType_name, OrderType_value)
	proto.RegisterType((*Tax)(nil), "restaurant.Tax")
}

func init() {
	proto.RegisterFile("tax.proto", fileDescriptor_dc148b98924644b2)
}

var fileDescriptor_dc148b98924644b2 = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xdf, 0x6b, 0xd3, 0x50,
	0x14, 0x36, 0xc9, 0x96, 0x36, 0xa7, 0xb3, 0x8b, 0x07, 0xc5, 0x10, 0x04, 0x83, 0xfa, 0x10, 0x45,
	0x33, 0xe9, 0x40, 0xf0, 0x49, 0x02, 0x2b, 0x21, 0x08, 0x9d, 0xde, 0x46, 0xc4, 0xa7, 0x72, 0x9b,
	0x7b, 0x2c, 0x17, 0xda, 0x26, 0x24, 0x37, 0xa5, 0xfb, 0x5b, 0xfd, 0x4b, 0x7c, 0x93, 0xdc, 0xac,
	0x5b, 0x69, 0x85, 0xbd, 0x9d, 0xf3, 0xfd, 0xc8, 0xf9, 0xf2, 0x25, 0xe0, 0x28, 0xbe, 0x8d, 0xca,
	0xaa, 0x50, 0x05, 0x42, 0x45, 0xb5, 0xe2, 0x4d, 0xc5, 0xd7, 0xca, 0x7f, 0xb9, 0x28, 0x8a, 0xc5,
	0x92, 0x2e, 0x34, 0x33, 0x6f, 0x7e, 0x5f, 0x28, 0xb9, 0x6a, 0xd9, 0x55, 0xd9, 0x89, 0xfd, 0xc1,
	0x9c, 0xd7, 0x32, 0xef, 0x96, 0x57, 0x7f, 0x4c, 0xb0, 0x32, 0xbe, 0xc5, 0x21, 0x98, 0x52, 0x78,
	0x46, 0x60, 0x84, 0x0e, 0x33, 0xa5, 0xc0, 0xe7, 0xd0, 0x6b, 0x9f, 0x39, 0x93, 0xc2, 0x33, 0x35,
	0x68, 0xb7, 0x6b, 0x2a, 0xf0, 0x0d, 0x9c, 0xac, 0xf9, 0x8a, 0x3c, 0x2b, 0x30, 0xc2, 0xc1, 0xc8,
	0x8d, 0xee, 0x2f, 0x47, 0x13, 0xbe, 0x22, 0xa6, 0x59, 0x7c, 0x01, 0x8e, 0x5c, 0xe7, 0xcb, 0xa6,
	0x96, 0x1b, 0xf2, 0x4e, 0x02, 0x23, 0xec, 0xb3, 0x7b, 0x00, 0x5f, 0xc3, 0x63, 0x59, 0xcf, 0x4a,
	0xaa, 0x72, 0x5a, 0x2b, 0xbe, 0x20, 0xef, 0x54, 0x2b, 0xce, 0x64, 0xfd, 0xed, 0x0e, 0xc3, 0xa7,
	0x70, 0xba, 0xe1, 0xcb, 0x86, 0x3c, 0x3b, 0x30, 0x42, 0x93, 0x75, 0x0b, 0x7e, 0x82, 0x41, 0x51,
	0x09, 0xaa, 0x66, 0xea, 0xa6, 0xa4, 0xda, 0xeb, 0x05, 0x56, 0x38, 0x1c, 0x3d, 0xdb, 0x4f, 0x71,
	0xdd, 0xd2, 0xd9, 0x4d, 0x49, 0x0c, 0x8a, 0xdd, 0x58, 0xe3, 0x67, 0x80, 0xbc, 0x22, 0xae, 0x48,
	0xcc, 0xb8, 0xf2, 0xfa, 0x3a, 0xbc, 0x1f, 0x75, 0x55, 0x45, 0xbb, 0xaa, 0xa2, 0x6c, 0x57, 0x15,
	0x73, 0x6e, 0xd5, 0xb1, 0x6a, 0xad, 0x4d, 0x29, 0x76, 0x56, 0xe7, 0x61, 0xeb, 0xad, 0x3a, 0x56,
	0xef, 0xbe, 0x80, 0x73, 0x17, 0x07, 0x01, 0xec, 0xab, 0x74, 0x32, 0x4e, 0x27, 0xee, 0x23, 0x3c,
	0x83, 0x7e, 0x16, 0x7f, 0x1d, 0xc7, 0x3f, 0xe3, 0x5f, 0xae, 0x81, 0xe7, 0x30, 0x88, 0x93, 0x84,
	0x8d, 0x93, 0x38, 0xbb, 0x66, 0x53, 0xd7, 0xc4, 0x1e, 0x58, 0xdf, 0xa7, 0xcc, 0xb5, 0x46, 0x7f,
	0x0d, 0x80, 0x8c, 0x6f, 0xa7, 0x54, 0x6d, 0x64, 0x4e, 0xf8, 0x16, 0xec, 0x58, 0x88, 0xf6, 0x7b,
	0x9d, 0xef, 0xbf, 0x72, 0xc6, 0xb7, 0xfe, 0x70, 0x1f, 0x48, 0x05, 0x7e, 0x00, 0xe7, 0x87, 0xce,
	0xf1, 0x5f, 0xf5, 0x21, 0x80, 0xef, 0xc1, 0x4e, 0x48, 0xb5, 0xd3, 0x93, 0x03, 0x2a, 0x15, 0xc7,
	0xea, 0x4b, 0x80, 0x84, 0x14, 0xa3, 0x5a, 0x3b, 0x70, 0x9f, 0x66, 0xfa, 0x37, 0x39, 0xb2, 0x7c,
	0x34, 0x30, 0x02, 0xe7, 0x8a, 0x96, 0xd4, 0x25, 0x3a, 0x88, 0xeb, 0x1f, 0x5f, 0x9d, 0xdb, 0xba,
	0xdb, 0xcb, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x15, 0x05, 0x8b, 0xe8, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TaxServiceClient is the client API for TaxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaxServiceClient interface {
	AddTax(ctx context.Context, in *Tax, opts ...grpc.CallOption) (*Id, error)
	UpdateTax(ctx context.Context, in *Tax, opts ...grpc.CallOption) (*Tax, error)
	GetTax(ctx context.Context, in *TaxId, opts ...grpc.CallOption) (*Tax, error)
	GetRestTax(ctx context.Context, in *RestId, opts ...grpc.CallOption) (TaxService_GetRestTaxClient, error)
	DeleteTax(ctx context.Context, in *Id, opts ...grpc.CallOption) (*TaxId, error)
}

type taxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaxServiceClient(cc grpc.ClientConnInterface) TaxServiceClient {
	return &taxServiceClient{cc}
}

func (c *taxServiceClient) AddTax(ctx context.Context, in *Tax, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/restaurant.TaxService/AddTax", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxServiceClient) UpdateTax(ctx context.Context, in *Tax, opts ...grpc.CallOption) (*Tax, error) {
	out := new(Tax)
	err := c.cc.Invoke(ctx, "/restaurant.TaxService/UpdateTax", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxServiceClient) GetTax(ctx context.Context, in *TaxId, opts ...grpc.CallOption) (*Tax, error) {
	out := new(Tax)
	err := c.cc.Invoke(ctx, "/restaurant.TaxService/GetTax", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxServiceClient) GetRestTax(ctx context.Context, in *RestId, opts ...grpc.CallOption) (TaxService_GetRestTaxClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TaxService_serviceDesc.Streams[0], "/restaurant.TaxService/GetRestTax", opts...)
	if err != nil {
		return nil, err
	}
	x := &taxServiceGetRestTaxClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TaxService_GetRestTaxClient interface {
	Recv() (*Tax, error)
	grpc.ClientStream
}

type taxServiceGetRestTaxClient struct {
	grpc.ClientStream
}

func (x *taxServiceGetRestTaxClient) Recv() (*Tax, error) {
	m := new(Tax)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taxServiceClient) DeleteTax(ctx context.Context, in *Id, opts ...grpc.CallOption) (*TaxId, error) {
	out := new(TaxId)
	err := c.cc.Invoke(ctx, "/restaurant.TaxService/DeleteTax", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaxServiceServer is the server API for TaxService service.
type TaxServiceServer interface {
	AddTax(context.Context, *Tax) (*Id, error)
	UpdateTax(context.Context, *Tax) (*Tax, error)
	GetTax(context.Context, *TaxId) (*Tax, error)
	GetRestTax(*RestId, TaxService_GetRestTaxServer) error
	DeleteTax(context.Context, *Id) (*TaxId, error)
}

// UnimplementedTaxServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTaxServiceServer struct {
}

func (*UnimplementedTaxServiceServer) AddTax(ctx context.Context, req *Tax) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTax not implemented")
}
func (*UnimplementedTaxServiceServer) UpdateTax(ctx context.Context, req *Tax) (*Tax, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTax not implemented")
}
func (*UnimplementedTaxServiceServer) GetTax(ctx context.Context, req *TaxId) (*Tax, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTax not implemented")
}
func (*UnimplementedTaxServiceServer) GetRestTax(req *RestId, srv TaxService_GetRestTaxServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRestTax not implemented")
}
func (*UnimplementedTaxServiceServer) DeleteTax(ctx context.Context, req *Id) (*TaxId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTax not implemented")
}

func RegisterTaxServiceServer(s *grpc.Server, srv TaxServiceServer) {
	s.RegisterService(&_TaxService_serviceDesc, srv)
}

func _TaxService_AddTax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tax)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).AddTax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.TaxService/AddTax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).AddTax(ctx, req.(*Tax))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxService_UpdateTax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tax)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).UpdateTax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.TaxService/UpdateTax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).UpdateTax(ctx, req.(*Tax))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxService_GetTax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaxId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).GetTax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.TaxService/GetTax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).GetTax(ctx, req.(*TaxId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxService_GetRestTax_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RestId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaxServiceServer).GetRestTax(m, &taxServiceGetRestTaxServer{stream})
}

type TaxService_GetRestTaxServer interface {
	Send(*Tax) error
	grpc.ServerStream
}

type taxServiceGetRestTaxServer struct {
	grpc.ServerStream
}

func (x *taxServiceGetRestTaxServer) Send(m *Tax) error {
	return x.ServerStream.SendMsg(m)
}

func _TaxService_DeleteTax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).DeleteTax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.TaxService/DeleteTax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).DeleteTax(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaxService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "restaurant.TaxService",
	HandlerType: (*TaxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTax",
			Handler:    _TaxService_AddTax_Handler,
		},
		{
			MethodName: "UpdateTax",
			Handler:    _TaxService_UpdateTax_Handler,
		},
		{
			MethodName: "GetTax",
			Handler:    _TaxService_GetTax_Handler,
		},
		{
			MethodName: "DeleteTax",
			Handler:    _TaxService_DeleteTax_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRestTax",
			Handler:       _TaxService_GetRestTax_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tax.proto",
}
