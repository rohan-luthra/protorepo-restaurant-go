// Code generated by protoc-gen-go. DO NOT EDIT.
// source: restaurant.proto

package restaurant

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SubscriptionPlan int32

const (
	SubscriptionPlan_MONTHLY     SubscriptionPlan = 0
	SubscriptionPlan_QUATERLY    SubscriptionPlan = 1
	SubscriptionPlan_HALF_YEARLY SubscriptionPlan = 2
	SubscriptionPlan_YEARLY      SubscriptionPlan = 3
)

var SubscriptionPlan_name = map[int32]string{
	0: "MONTHLY",
	1: "QUATERLY",
	2: "HALF_YEARLY",
	3: "YEARLY",
}

var SubscriptionPlan_value = map[string]int32{
	"MONTHLY":     0,
	"QUATERLY":    1,
	"HALF_YEARLY": 2,
	"YEARLY":      3,
}

func (x SubscriptionPlan) String() string {
	return proto.EnumName(SubscriptionPlan_name, int32(x))
}

func (SubscriptionPlan) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9528536a6390faa1, []int{0}
}

type PaymentMode int32

const (
	PaymentMode_CASH   PaymentMode = 0
	PaymentMode_CARD   PaymentMode = 1
	PaymentMode_ONLINE PaymentMode = 2
	PaymentMode_WALLET PaymentMode = 3
)

var PaymentMode_name = map[int32]string{
	0: "CASH",
	1: "CARD",
	2: "ONLINE",
	3: "WALLET",
}

var PaymentMode_value = map[string]int32{
	"CASH":   0,
	"CARD":   1,
	"ONLINE": 2,
	"WALLET": 3,
}

func (x PaymentMode) String() string {
	return proto.EnumName(PaymentMode_name, int32(x))
}

func (PaymentMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9528536a6390faa1, []int{1}
}

type Days int32

const (
	Days_MONDAY    Days = 0
	Days_TUESDAY   Days = 1
	Days_WEDNESDAY Days = 2
	Days_THURSDAY  Days = 3
	Days_FRIDAY    Days = 4
	Days_SATURDAY  Days = 5
	Days_SUNDAY    Days = 6
)

var Days_name = map[int32]string{
	0: "MONDAY",
	1: "TUESDAY",
	2: "WEDNESDAY",
	3: "THURSDAY",
	4: "FRIDAY",
	5: "SATURDAY",
	6: "SUNDAY",
}

var Days_value = map[string]int32{
	"MONDAY":    0,
	"TUESDAY":   1,
	"WEDNESDAY": 2,
	"THURSDAY":  3,
	"FRIDAY":    4,
	"SATURDAY":  5,
	"SUNDAY":    6,
}

func (x Days) String() string {
	return proto.EnumName(Days_name, int32(x))
}

func (Days) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9528536a6390faa1, []int{2}
}

type Payment struct {
	Gstin                string   `protobuf:"bytes,1,opt,name=gstin,proto3" json:"gstin,omitempty"`
	Pan                  string   `protobuf:"bytes,2,opt,name=pan,proto3" json:"pan,omitempty"`
	Upi                  string   `protobuf:"bytes,3,opt,name=upi,proto3" json:"upi,omitempty"`
	BankName             string   `protobuf:"bytes,4,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`
	AccountName          string   `protobuf:"bytes,5,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	AccountNumber        string   `protobuf:"bytes,6,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	Ifsc                 string   `protobuf:"bytes,7,opt,name=ifsc,proto3" json:"ifsc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Payment) Reset()         { *m = Payment{} }
func (m *Payment) String() string { return proto.CompactTextString(m) }
func (*Payment) ProtoMessage()    {}
func (*Payment) Descriptor() ([]byte, []int) {
	return fileDescriptor_9528536a6390faa1, []int{0}
}

func (m *Payment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Payment.Unmarshal(m, b)
}
func (m *Payment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Payment.Marshal(b, m, deterministic)
}
func (m *Payment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payment.Merge(m, src)
}
func (m *Payment) XXX_Size() int {
	return xxx_messageInfo_Payment.Size(m)
}
func (m *Payment) XXX_DiscardUnknown() {
	xxx_messageInfo_Payment.DiscardUnknown(m)
}

var xxx_messageInfo_Payment proto.InternalMessageInfo

func (m *Payment) GetGstin() string {
	if m != nil {
		return m.Gstin
	}
	return ""
}

func (m *Payment) GetPan() string {
	if m != nil {
		return m.Pan
	}
	return ""
}

func (m *Payment) GetUpi() string {
	if m != nil {
		return m.Upi
	}
	return ""
}

func (m *Payment) GetBankName() string {
	if m != nil {
		return m.BankName
	}
	return ""
}

func (m *Payment) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *Payment) GetAccountNumber() string {
	if m != nil {
		return m.AccountNumber
	}
	return ""
}

func (m *Payment) GetIfsc() string {
	if m != nil {
		return m.Ifsc
	}
	return ""
}

type Slot struct {
	StartTime            string   `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              string   `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Slot) Reset()         { *m = Slot{} }
func (m *Slot) String() string { return proto.CompactTextString(m) }
func (*Slot) ProtoMessage()    {}
func (*Slot) Descriptor() ([]byte, []int) {
	return fileDescriptor_9528536a6390faa1, []int{1}
}

func (m *Slot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Slot.Unmarshal(m, b)
}
func (m *Slot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Slot.Marshal(b, m, deterministic)
}
func (m *Slot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Slot.Merge(m, src)
}
func (m *Slot) XXX_Size() int {
	return xxx_messageInfo_Slot.Size(m)
}
func (m *Slot) XXX_DiscardUnknown() {
	xxx_messageInfo_Slot.DiscardUnknown(m)
}

var xxx_messageInfo_Slot proto.InternalMessageInfo

func (m *Slot) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *Slot) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

type Timings struct {
	Day                  Days     `protobuf:"varint,1,opt,name=day,proto3,enum=restaurant.Days" json:"day,omitempty"`
	Slots                []*Slot  `protobuf:"bytes,2,rep,name=slots,proto3" json:"slots,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Timings) Reset()         { *m = Timings{} }
func (m *Timings) String() string { return proto.CompactTextString(m) }
func (*Timings) ProtoMessage()    {}
func (*Timings) Descriptor() ([]byte, []int) {
	return fileDescriptor_9528536a6390faa1, []int{2}
}

func (m *Timings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Timings.Unmarshal(m, b)
}
func (m *Timings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Timings.Marshal(b, m, deterministic)
}
func (m *Timings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timings.Merge(m, src)
}
func (m *Timings) XXX_Size() int {
	return xxx_messageInfo_Timings.Size(m)
}
func (m *Timings) XXX_DiscardUnknown() {
	xxx_messageInfo_Timings.DiscardUnknown(m)
}

var xxx_messageInfo_Timings proto.InternalMessageInfo

func (m *Timings) GetDay() Days {
	if m != nil {
		return m.Day
	}
	return Days_MONDAY
}

func (m *Timings) GetSlots() []*Slot {
	if m != nil {
		return m.Slots
	}
	return nil
}

type Address struct {
	Line1                string   `protobuf:"bytes,1,opt,name=line1,proto3" json:"line1,omitempty"`
	Line2                string   `protobuf:"bytes,2,opt,name=line2,proto3" json:"line2,omitempty"`
	City                 string   `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
	CityId               string   `protobuf:"bytes,4,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	State                string   `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Country              string   `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`
	CountryId            string   `protobuf:"bytes,7,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
	Pincode              int32    `protobuf:"varint,8,opt,name=pincode,proto3" json:"pincode,omitempty"`
	GeoLatitude          float32  `protobuf:"fixed32,9,opt,name=geo_latitude,json=geoLatitude,proto3" json:"geo_latitude,omitempty"`
	GeoLongitude         float32  `protobuf:"fixed32,10,opt,name=geo_longitude,json=geoLongitude,proto3" json:"geo_longitude,omitempty"`
	Timezone             string   `protobuf:"bytes,11,opt,name=timezone,proto3" json:"timezone,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_9528536a6390faa1, []int{3}
}

func (m *Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Address.Unmarshal(m, b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Address.Marshal(b, m, deterministic)
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return xxx_messageInfo_Address.Size(m)
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetLine1() string {
	if m != nil {
		return m.Line1
	}
	return ""
}

func (m *Address) GetLine2() string {
	if m != nil {
		return m.Line2
	}
	return ""
}

func (m *Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Address) GetCityId() string {
	if m != nil {
		return m.CityId
	}
	return ""
}

func (m *Address) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Address) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Address) GetCountryId() string {
	if m != nil {
		return m.CountryId
	}
	return ""
}

func (m *Address) GetPincode() int32 {
	if m != nil {
		return m.Pincode
	}
	return 0
}

func (m *Address) GetGeoLatitude() float32 {
	if m != nil {
		return m.GeoLatitude
	}
	return 0
}

func (m *Address) GetGeoLongitude() float32 {
	if m != nil {
		return m.GeoLongitude
	}
	return 0
}

func (m *Address) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

type Restaurant struct {
	Id                   string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 *Name                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Username             string                `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Hashword             string                `protobuf:"bytes,4,opt,name=hashword,proto3" json:"hashword,omitempty"`
	HashwordSalt         int32                 `protobuf:"varint,5,opt,name=hashword_salt,json=hashwordSalt,proto3" json:"hashword_salt,omitempty"`
	Contacts             []*Restaurant_Contact `protobuf:"bytes,7,rep,name=contacts,proto3" json:"contacts,omitempty"`
	PersonOfContact      string                `protobuf:"bytes,8,opt,name=person_of_contact,json=personOfContact,proto3" json:"person_of_contact,omitempty"`
	Logo                 string                `protobuf:"bytes,9,opt,name=logo,proto3" json:"logo,omitempty"`
	ProfileImage         string                `protobuf:"bytes,10,opt,name=profile_image,json=profileImage,proto3" json:"profile_image,omitempty"`
	Active               bool                  `protobuf:"varint,11,opt,name=active,proto3" json:"active,omitempty"`
	Address              *Address              `protobuf:"bytes,12,opt,name=address,proto3" json:"address,omitempty"`
	Images               []string              `protobuf:"bytes,13,rep,name=images,proto3" json:"images,omitempty"`
	FcmTokens            []string              `protobuf:"bytes,14,rep,name=fcm_tokens,json=fcmTokens,proto3" json:"fcm_tokens,omitempty"`
	PaymentModes         []PaymentMode         `protobuf:"varint,15,rep,packed,name=payment_modes,json=paymentModes,proto3,enum=restaurant.PaymentMode" json:"payment_modes,omitempty"`
	Timings              []*Timings            `protobuf:"bytes,16,rep,name=timings,proto3" json:"timings,omitempty"`
	SubscriptionPlan     SubscriptionPlan      `protobuf:"varint,17,opt,name=subscription_plan,json=subscriptionPlan,proto3,enum=restaurant.SubscriptionPlan" json:"subscription_plan,omitempty"`
	SubscriptionPrice    float32               `protobuf:"fixed32,18,opt,name=subscription_price,json=subscriptionPrice,proto3" json:"subscription_price,omitempty"`
	Curreny              *Currency             `protobuf:"bytes,20,opt,name=curreny,proto3" json:"curreny,omitempty"`
	AssignedSalesEmpId   string                `protobuf:"bytes,21,opt,name=assigned_sales_emp_id,json=assignedSalesEmpId,proto3" json:"assigned_sales_emp_id,omitempty"`
	AssignedOpsEmpId     string                `protobuf:"bytes,22,opt,name=assigned_ops_emp_id,json=assignedOpsEmpId,proto3" json:"assigned_ops_emp_id,omitempty"`
	TrialDays            float32               `protobuf:"fixed32,23,opt,name=trial_days,json=trialDays,proto3" json:"trial_days,omitempty"`
	CreatedAt            *timestamp.Timestamp  `protobuf:"bytes,24,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamp.Timestamp  `protobuf:"bytes,25,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Restaurant) Reset()         { *m = Restaurant{} }
func (m *Restaurant) String() string { return proto.CompactTextString(m) }
func (*Restaurant) ProtoMessage()    {}
func (*Restaurant) Descriptor() ([]byte, []int) {
	return fileDescriptor_9528536a6390faa1, []int{4}
}

func (m *Restaurant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Restaurant.Unmarshal(m, b)
}
func (m *Restaurant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Restaurant.Marshal(b, m, deterministic)
}
func (m *Restaurant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Restaurant.Merge(m, src)
}
func (m *Restaurant) XXX_Size() int {
	return xxx_messageInfo_Restaurant.Size(m)
}
func (m *Restaurant) XXX_DiscardUnknown() {
	xxx_messageInfo_Restaurant.DiscardUnknown(m)
}

var xxx_messageInfo_Restaurant proto.InternalMessageInfo

func (m *Restaurant) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Restaurant) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Restaurant) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Restaurant) GetHashword() string {
	if m != nil {
		return m.Hashword
	}
	return ""
}

func (m *Restaurant) GetHashwordSalt() int32 {
	if m != nil {
		return m.HashwordSalt
	}
	return 0
}

func (m *Restaurant) GetContacts() []*Restaurant_Contact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *Restaurant) GetPersonOfContact() string {
	if m != nil {
		return m.PersonOfContact
	}
	return ""
}

func (m *Restaurant) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *Restaurant) GetProfileImage() string {
	if m != nil {
		return m.ProfileImage
	}
	return ""
}

func (m *Restaurant) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Restaurant) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Restaurant) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *Restaurant) GetFcmTokens() []string {
	if m != nil {
		return m.FcmTokens
	}
	return nil
}

func (m *Restaurant) GetPaymentModes() []PaymentMode {
	if m != nil {
		return m.PaymentModes
	}
	return nil
}

func (m *Restaurant) GetTimings() []*Timings {
	if m != nil {
		return m.Timings
	}
	return nil
}

func (m *Restaurant) GetSubscriptionPlan() SubscriptionPlan {
	if m != nil {
		return m.SubscriptionPlan
	}
	return SubscriptionPlan_MONTHLY
}

func (m *Restaurant) GetSubscriptionPrice() float32 {
	if m != nil {
		return m.SubscriptionPrice
	}
	return 0
}

func (m *Restaurant) GetCurreny() *Currency {
	if m != nil {
		return m.Curreny
	}
	return nil
}

func (m *Restaurant) GetAssignedSalesEmpId() string {
	if m != nil {
		return m.AssignedSalesEmpId
	}
	return ""
}

func (m *Restaurant) GetAssignedOpsEmpId() string {
	if m != nil {
		return m.AssignedOpsEmpId
	}
	return ""
}

func (m *Restaurant) GetTrialDays() float32 {
	if m != nil {
		return m.TrialDays
	}
	return 0
}

func (m *Restaurant) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Restaurant) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type Restaurant_Contact struct {
	PhoneNumber          string   `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Email                string   `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Restaurant_Contact) Reset()         { *m = Restaurant_Contact{} }
func (m *Restaurant_Contact) String() string { return proto.CompactTextString(m) }
func (*Restaurant_Contact) ProtoMessage()    {}
func (*Restaurant_Contact) Descriptor() ([]byte, []int) {
	return fileDescriptor_9528536a6390faa1, []int{4, 0}
}

func (m *Restaurant_Contact) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Restaurant_Contact.Unmarshal(m, b)
}
func (m *Restaurant_Contact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Restaurant_Contact.Marshal(b, m, deterministic)
}
func (m *Restaurant_Contact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Restaurant_Contact.Merge(m, src)
}
func (m *Restaurant_Contact) XXX_Size() int {
	return xxx_messageInfo_Restaurant_Contact.Size(m)
}
func (m *Restaurant_Contact) XXX_DiscardUnknown() {
	xxx_messageInfo_Restaurant_Contact.DiscardUnknown(m)
}

var xxx_messageInfo_Restaurant_Contact proto.InternalMessageInfo

func (m *Restaurant_Contact) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *Restaurant_Contact) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Restaurant_Contact) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AddRestaurantReq struct {
	Name                 *Name            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Username             string           `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password             string           `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	ContactNumber        string           `protobuf:"bytes,4,opt,name=contact_number,json=contactNumber,proto3" json:"contact_number,omitempty"`
	PersonOfContact      string           `protobuf:"bytes,5,opt,name=person_of_contact,json=personOfContact,proto3" json:"person_of_contact,omitempty"`
	Logo                 string           `protobuf:"bytes,6,opt,name=logo,proto3" json:"logo,omitempty"`
	ProfileImage         string           `protobuf:"bytes,7,opt,name=profile_image,json=profileImage,proto3" json:"profile_image,omitempty"`
	Active               bool             `protobuf:"varint,8,opt,name=active,proto3" json:"active,omitempty"`
	Address              *Address         `protobuf:"bytes,9,opt,name=address,proto3" json:"address,omitempty"`
	PaymentModes         []PaymentMode    `protobuf:"varint,10,rep,packed,name=payment_modes,json=paymentModes,proto3,enum=restaurant.PaymentMode" json:"payment_modes,omitempty"`
	Timings              []*Timings       `protobuf:"bytes,11,rep,name=timings,proto3" json:"timings,omitempty"`
	SubscriptionPlan     SubscriptionPlan `protobuf:"varint,12,opt,name=subscription_plan,json=subscriptionPlan,proto3,enum=restaurant.SubscriptionPlan" json:"subscription_plan,omitempty"`
	SubscriptionPrice    float32          `protobuf:"fixed32,13,opt,name=subscription_price,json=subscriptionPrice,proto3" json:"subscription_price,omitempty"`
	DefaultCurrenyId     string           `protobuf:"bytes,20,opt,name=default_curreny_id,json=defaultCurrenyId,proto3" json:"default_curreny_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AddRestaurantReq) Reset()         { *m = AddRestaurantReq{} }
func (m *AddRestaurantReq) String() string { return proto.CompactTextString(m) }
func (*AddRestaurantReq) ProtoMessage()    {}
func (*AddRestaurantReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9528536a6390faa1, []int{5}
}

func (m *AddRestaurantReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddRestaurantReq.Unmarshal(m, b)
}
func (m *AddRestaurantReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddRestaurantReq.Marshal(b, m, deterministic)
}
func (m *AddRestaurantReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRestaurantReq.Merge(m, src)
}
func (m *AddRestaurantReq) XXX_Size() int {
	return xxx_messageInfo_AddRestaurantReq.Size(m)
}
func (m *AddRestaurantReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRestaurantReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddRestaurantReq proto.InternalMessageInfo

func (m *AddRestaurantReq) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *AddRestaurantReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AddRestaurantReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *AddRestaurantReq) GetContactNumber() string {
	if m != nil {
		return m.ContactNumber
	}
	return ""
}

func (m *AddRestaurantReq) GetPersonOfContact() string {
	if m != nil {
		return m.PersonOfContact
	}
	return ""
}

func (m *AddRestaurantReq) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *AddRestaurantReq) GetProfileImage() string {
	if m != nil {
		return m.ProfileImage
	}
	return ""
}

func (m *AddRestaurantReq) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *AddRestaurantReq) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *AddRestaurantReq) GetPaymentModes() []PaymentMode {
	if m != nil {
		return m.PaymentModes
	}
	return nil
}

func (m *AddRestaurantReq) GetTimings() []*Timings {
	if m != nil {
		return m.Timings
	}
	return nil
}

func (m *AddRestaurantReq) GetSubscriptionPlan() SubscriptionPlan {
	if m != nil {
		return m.SubscriptionPlan
	}
	return SubscriptionPlan_MONTHLY
}

func (m *AddRestaurantReq) GetSubscriptionPrice() float32 {
	if m != nil {
		return m.SubscriptionPrice
	}
	return 0
}

func (m *AddRestaurantReq) GetDefaultCurrenyId() string {
	if m != nil {
		return m.DefaultCurrenyId
	}
	return ""
}

func init() {
	proto.RegisterEnum("restaurant.SubscriptionPlan", SubscriptionPlan_name, SubscriptionPlan_value)
	proto.RegisterEnum("restaurant.PaymentMode", PaymentMode_name, PaymentMode_value)
	proto.RegisterEnum("restaurant.Days", Days_name, Days_value)
	proto.RegisterType((*Payment)(nil), "restaurant.Payment")
	proto.RegisterType((*Slot)(nil), "restaurant.Slot")
	proto.RegisterType((*Timings)(nil), "restaurant.Timings")
	proto.RegisterType((*Address)(nil), "restaurant.Address")
	proto.RegisterType((*Restaurant)(nil), "restaurant.Restaurant")
	proto.RegisterType((*Restaurant_Contact)(nil), "restaurant.Restaurant.Contact")
	proto.RegisterType((*AddRestaurantReq)(nil), "restaurant.AddRestaurantReq")
}

func init() {
	proto.RegisterFile("restaurant.proto", fileDescriptor_9528536a6390faa1)
}

var fileDescriptor_9528536a6390faa1 = []byte{
	// 1256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x5d, 0x8f, 0xd3, 0x46,
	0x14, 0x25, 0x9f, 0x8e, 0x6f, 0x3e, 0xf0, 0x0e, 0x0b, 0x98, 0x14, 0xda, 0x25, 0xfd, 0xd0, 0x6a,
	0x55, 0x96, 0xb2, 0x7d, 0xa8, 0x40, 0x45, 0x6a, 0xc4, 0x86, 0x6e, 0xaa, 0xb0, 0x4b, 0x9d, 0xa4,
	0x88, 0x27, 0x6b, 0x62, 0x4f, 0x82, 0x85, 0xed, 0x71, 0x3d, 0x13, 0xaa, 0xf4, 0xf7, 0xf4, 0xbd,
	0xef, 0x7d, 0xe8, 0xef, 0xe8, 0xcf, 0xa9, 0xee, 0xcc, 0x38, 0x9b, 0x2c, 0x2c, 0x45, 0xa8, 0x4f,
	0x99, 0x7b, 0xee, 0xb9, 0xf6, 0xf5, 0xc9, 0x3d, 0x77, 0xc0, 0xc9, 0x99, 0x90, 0x74, 0x99, 0xd3,
	0x54, 0x1e, 0x66, 0x39, 0x97, 0x9c, 0xc0, 0x39, 0xd2, 0xfd, 0x6c, 0xc1, 0xf9, 0x22, 0x66, 0xf7,
	0x55, 0x66, 0xb6, 0x9c, 0xdf, 0x97, 0x51, 0x82, 0xd9, 0x24, 0xd3, 0xe4, 0x6e, 0x73, 0x46, 0x45,
	0x14, 0x98, 0xa0, 0x13, 0x2c, 0xf3, 0x9c, 0xa5, 0xc1, 0x4a, 0xc7, 0xbd, 0xbf, 0x4b, 0x60, 0x3d,
	0xa7, 0xab, 0x84, 0xa5, 0x92, 0xec, 0x42, 0x6d, 0x21, 0x64, 0x94, 0xba, 0xa5, 0xbd, 0xd2, 0xbe,
	0xed, 0xe9, 0x80, 0x38, 0x50, 0xc9, 0x68, 0xea, 0x96, 0x15, 0x86, 0x47, 0x44, 0x96, 0x59, 0xe4,
	0x56, 0x34, 0xb2, 0xcc, 0x22, 0xf2, 0x09, 0xd8, 0x33, 0x9a, 0xbe, 0xf6, 0x53, 0x9a, 0x30, 0xb7,
	0xaa, 0xf0, 0x06, 0x02, 0xa7, 0x34, 0x61, 0xe4, 0x2e, 0xb4, 0x68, 0x10, 0xf0, 0x65, 0x2a, 0x75,
	0xbe, 0xa6, 0xf2, 0x4d, 0x83, 0x29, 0xca, 0x97, 0xd0, 0x59, 0x53, 0x96, 0xc9, 0x8c, 0xe5, 0x6e,
	0x5d, 0x91, 0xda, 0x05, 0x49, 0x81, 0x84, 0x40, 0x35, 0x9a, 0x8b, 0xc0, 0xb5, 0x54, 0x52, 0x9d,
	0x7b, 0x3f, 0x40, 0x75, 0x1c, 0x73, 0x49, 0xee, 0x00, 0x08, 0x49, 0x73, 0xe9, 0xe3, 0xe7, 0x9b,
	0x2f, 0xb0, 0x15, 0x32, 0x89, 0x12, 0x46, 0x6e, 0x41, 0x83, 0xa5, 0xa1, 0x4e, 0xea, 0x4f, 0xb1,
	0x58, 0x1a, 0x62, 0xaa, 0x37, 0x05, 0x6b, 0x12, 0x25, 0x51, 0xba, 0x10, 0xa4, 0x07, 0x95, 0x90,
	0xae, 0x54, 0x75, 0xe7, 0xc8, 0x39, 0xdc, 0xd0, 0xfd, 0x98, 0xae, 0x84, 0x87, 0x49, 0xf2, 0x15,
	0xd4, 0x44, 0xcc, 0xa5, 0x70, 0xcb, 0x7b, 0x95, 0xfd, 0xe6, 0x36, 0x0b, 0x3b, 0xf1, 0x74, 0xba,
	0xf7, 0x67, 0x19, 0xac, 0x7e, 0x18, 0xe6, 0x4c, 0x08, 0x54, 0x36, 0x8e, 0x52, 0xf6, 0xa0, 0x50,
	0x56, 0x05, 0x05, 0x7a, 0x64, 0x1a, 0xd2, 0x01, 0x7e, 0x64, 0x10, 0xc9, 0x95, 0x91, 0x57, 0x9d,
	0xc9, 0x4d, 0xb0, 0xf0, 0xd7, 0x8f, 0x42, 0xa3, 0x6e, 0x1d, 0xc3, 0x61, 0x88, 0x8f, 0x10, 0x92,
	0xca, 0x42, 0x54, 0x1d, 0x10, 0x17, 0x2c, 0x25, 0x5b, 0xbe, 0x32, 0x3a, 0x16, 0x21, 0xaa, 0x64,
	0x8e, 0xf8, 0x2c, 0xad, 0xa3, 0x6d, 0x90, 0x61, 0x88, 0x85, 0x59, 0x94, 0x06, 0x3c, 0x64, 0x6e,
	0x63, 0xaf, 0xb4, 0x5f, 0xf3, 0x8a, 0x10, 0xff, 0xc4, 0x05, 0xe3, 0x7e, 0x4c, 0x65, 0x24, 0x97,
	0x21, 0x73, 0xed, 0xbd, 0xd2, 0x7e, 0xd9, 0x6b, 0x2e, 0x18, 0x1f, 0x19, 0x88, 0x7c, 0x0e, 0x6d,
	0x45, 0xe1, 0xe9, 0x42, 0x73, 0x40, 0x71, 0xb0, 0x6e, 0x54, 0x60, 0xa4, 0x0b, 0x0d, 0xfc, 0x0f,
	0x7e, 0xe7, 0x29, 0x73, 0x9b, 0x7a, 0x50, 0x8a, 0xb8, 0xf7, 0x47, 0x03, 0xc0, 0x5b, 0x8b, 0x49,
	0x3a, 0x50, 0x8e, 0x42, 0xa3, 0x58, 0x39, 0x0a, 0xc9, 0x17, 0x50, 0x55, 0xf3, 0x83, 0x6a, 0x5d,
	0xd0, 0x1d, 0x87, 0xc8, 0x53, 0x59, 0x7c, 0xc1, 0x52, 0xb0, 0x5c, 0x31, 0xb5, 0x84, 0xeb, 0x18,
	0x73, 0xaf, 0xa8, 0x78, 0xf5, 0x1b, 0xcf, 0x0b, 0x1d, 0xd7, 0x31, 0x76, 0x5f, 0x9c, 0x7d, 0x41,
	0x63, 0xa9, 0x14, 0xad, 0x79, 0xad, 0x02, 0x1c, 0xd3, 0x58, 0x92, 0x47, 0xd0, 0x08, 0x78, 0x2a,
	0x69, 0x20, 0x85, 0x6b, 0xa9, 0xbf, 0xff, 0xd3, 0xcd, 0x36, 0xce, 0x9b, 0x3f, 0x7c, 0xa2, 0x69,
	0xde, 0x9a, 0x4f, 0x0e, 0x60, 0x27, 0x63, 0xb9, 0xe0, 0xa9, 0xcf, 0xe7, 0xbe, 0x41, 0x95, 0xca,
	0xb6, 0x77, 0x55, 0x27, 0xce, 0xe6, 0xa6, 0x0a, 0x67, 0x20, 0xe6, 0x0b, 0xae, 0x54, 0xb6, 0x3d,
	0x75, 0xc6, 0x06, 0xb3, 0x9c, 0xcf, 0xa3, 0x98, 0xf9, 0x51, 0x42, 0x17, 0x5a, 0x5e, 0xdb, 0x6b,
	0x19, 0x70, 0x88, 0x18, 0xb9, 0x01, 0x75, 0x1a, 0xc8, 0xe8, 0x8d, 0x16, 0xb7, 0xe1, 0x99, 0x88,
	0xdc, 0x03, 0x8b, 0xea, 0x59, 0x74, 0x5b, 0x4a, 0xbe, 0x6b, 0x9b, 0x7d, 0x9b, 0x31, 0xf5, 0x0a,
	0x0e, 0x3e, 0x46, 0xbd, 0x43, 0xb8, 0xed, 0xbd, 0x0a, 0x8e, 0x9b, 0x8e, 0x70, 0x7c, 0xe6, 0x41,
	0xe2, 0x4b, 0xfe, 0x9a, 0xa5, 0xc2, 0xed, 0xa8, 0x9c, 0x3d, 0x0f, 0x92, 0x89, 0x02, 0xc8, 0xf7,
	0xd0, 0xce, 0xf4, 0x2e, 0xf1, 0x13, 0x1e, 0x32, 0xe1, 0x5e, 0xdd, 0xab, 0xec, 0x77, 0x8e, 0x6e,
	0x6e, 0xbe, 0xcb, 0x2c, 0x9b, 0x67, 0x3c, 0x64, 0x5e, 0x2b, 0x3b, 0x0f, 0x04, 0xf6, 0x28, 0xb5,
	0x0f, 0x5d, 0x47, 0x69, 0xbb, 0xd5, 0xa3, 0xb1, 0xa8, 0x57, 0x70, 0xc8, 0x10, 0x76, 0xc4, 0x72,
	0x26, 0x82, 0x3c, 0xca, 0x64, 0xc4, 0x53, 0x3f, 0x8b, 0x69, 0xea, 0xee, 0x28, 0xe7, 0xde, 0xde,
	0xf2, 0xe4, 0x06, 0xe9, 0x79, 0x4c, 0x53, 0xcf, 0x11, 0x17, 0x10, 0x72, 0x0f, 0xc8, 0xf6, 0xa3,
	0xf2, 0x28, 0x60, 0x2e, 0x51, 0xe3, 0xbb, 0xf5, 0x92, 0xe7, 0x98, 0x20, 0x87, 0x60, 0xe9, 0x2d,
	0xba, 0x72, 0x77, 0x95, 0x98, 0xbb, 0x9b, 0xef, 0x7b, 0x62, 0x16, 0xac, 0x57, 0x90, 0xc8, 0x03,
	0xb8, 0x4e, 0x85, 0x88, 0x16, 0x29, 0x53, 0xa3, 0xc5, 0x84, 0xcf, 0x92, 0x0c, 0xfd, 0x77, 0x5d,
	0xfd, 0x83, 0xa4, 0x48, 0x8e, 0x31, 0x37, 0x48, 0xb2, 0x61, 0x48, 0xee, 0xc1, 0xb5, 0x75, 0x09,
	0xcf, 0xd6, 0x05, 0x37, 0x54, 0x81, 0x53, 0xa4, 0xce, 0x32, 0x43, 0xbf, 0x03, 0x20, 0xf3, 0x88,
	0xc6, 0x7e, 0x48, 0x57, 0xc2, 0xbd, 0xa9, 0x1a, 0xb7, 0x15, 0x82, 0x7b, 0x8b, 0x3c, 0x04, 0x08,
	0x72, 0x46, 0x25, 0x0b, 0x7d, 0x2a, 0x5d, 0x57, 0xf5, 0xdc, 0x3d, 0xd4, 0xf7, 0xc6, 0x61, 0x71,
	0x6f, 0xa0, 0xc2, 0xfa, 0xde, 0xf0, 0x6c, 0xc3, 0xee, 0x4b, 0x2c, 0x5d, 0x66, 0x61, 0x51, 0x7a,
	0xeb, 0xbf, 0x4b, 0x0d, 0xbb, 0x2f, 0xbb, 0xbf, 0x80, 0x55, 0xcc, 0xf3, 0x5d, 0x68, 0x65, 0xaf,
	0x78, 0xca, 0x8a, 0xed, 0xae, 0x4d, 0xdd, 0x54, 0x98, 0xd9, 0xed, 0xbb, 0x50, 0x63, 0x09, 0x8d,
	0xe2, 0x62, 0x19, 0xaa, 0x00, 0x8d, 0xb0, 0xe1, 0x64, 0x75, 0xee, 0xfd, 0x53, 0x05, 0xa7, 0x1f,
	0x86, 0xe7, 0x66, 0xf3, 0xd8, 0xaf, 0xeb, 0xe5, 0x50, 0xfa, 0xe0, 0xe5, 0x50, 0x7e, 0x7b, 0x39,
	0x64, 0x54, 0x08, 0xb5, 0x1c, 0xcc, 0xe2, 0x28, 0x62, 0xbc, 0x9f, 0x8c, 0x63, 0x8b, 0x2f, 0xd0,
	0xeb, 0xa3, 0x6d, 0x50, 0xf3, 0x0d, 0xef, 0xb4, 0x78, 0xed, 0xfd, 0x16, 0xaf, 0xbf, 0xcf, 0xe2,
	0xd6, 0x7b, 0x2d, 0xde, 0xb8, 0xcc, 0xe2, 0xf6, 0x07, 0x58, 0xfc, 0x2d, 0xaf, 0xc2, 0x47, 0x7a,
	0xb5, 0xf9, 0xb1, 0x5e, 0x6d, 0xfd, 0x8f, 0x5e, 0x6d, 0x5f, 0xe6, 0xd5, 0xaf, 0x81, 0x84, 0x6c,
	0x4e, 0x97, 0xb1, 0xf4, 0x8d, 0x1d, 0xd1, 0x47, 0xbb, 0xda, 0x47, 0x26, 0xa3, 0x1d, 0xbb, 0x1a,
	0x86, 0x07, 0x3f, 0x81, 0x73, 0xb1, 0x05, 0xd2, 0x04, 0xeb, 0xd9, 0xd9, 0xe9, 0xe4, 0x64, 0xf4,
	0xd2, 0xb9, 0x42, 0x5a, 0xd0, 0xf8, 0x79, 0xda, 0x9f, 0x0c, 0xbc, 0xd1, 0x4b, 0xa7, 0x44, 0xae,
	0x42, 0xf3, 0xa4, 0x3f, 0x7a, 0xea, 0xbf, 0x1c, 0xf4, 0x11, 0x28, 0x13, 0x80, 0xba, 0x39, 0x57,
	0x0e, 0x1e, 0x42, 0x73, 0x43, 0x3f, 0xd2, 0x80, 0xea, 0x93, 0xfe, 0xf8, 0xc4, 0xb9, 0xa2, 0x4f,
	0xde, 0xb1, 0x53, 0x42, 0xfa, 0xd9, 0xe9, 0x68, 0x78, 0x3a, 0xd0, 0xa5, 0x2f, 0xfa, 0xa3, 0xd1,
	0x60, 0xe2, 0x54, 0x0e, 0x66, 0x50, 0x55, 0xbe, 0x05, 0xa8, 0x3f, 0x3b, 0x3b, 0x3d, 0xee, 0xe3,
	0x9b, 0x9b, 0x60, 0x4d, 0xa6, 0x83, 0x31, 0x06, 0x25, 0xd2, 0x06, 0xfb, 0xc5, 0xe0, 0xf8, 0x54,
	0x87, 0x65, 0xec, 0x6a, 0x72, 0x32, 0xf5, 0x54, 0x54, 0xc1, 0xaa, 0xa7, 0xde, 0x10, 0xcf, 0x55,
	0xcc, 0x8c, 0xfb, 0x93, 0xa9, 0x87, 0x51, 0x0d, 0x33, 0xe3, 0xa9, 0x7a, 0x5e, 0xfd, 0xe8, 0xaf,
	0x32, 0xec, 0x9c, 0x5b, 0x68, 0xcc, 0xf2, 0x37, 0x28, 0xd7, 0x63, 0x68, 0x6f, 0x59, 0x8b, 0xdc,
	0xbe, 0x30, 0x44, 0x5b, 0xae, 0xeb, 0x76, 0x36, 0xb3, 0xc3, 0x90, 0x7c, 0x07, 0xed, 0x1f, 0x99,
	0xdc, 0xbc, 0xc3, 0xb7, 0x09, 0xdd, 0x1b, 0xef, 0xbe, 0x2e, 0xc9, 0x63, 0xe8, 0x6c, 0x15, 0x0a,
	0xb2, 0xb3, 0xc9, 0x1c, 0x24, 0x99, 0x5c, 0x5d, 0x56, 0xfc, 0x4d, 0x89, 0x3c, 0x02, 0x67, 0xaa,
	0xf6, 0xce, 0xc6, 0x23, 0x2f, 0x61, 0xbf, 0xd5, 0xf3, 0x11, 0x38, 0xc7, 0x2c, 0x66, 0x5b, 0xb5,
	0x17, 0xdb, 0xbe, 0x10, 0xcf, 0xea, 0x6a, 0xf3, 0x7d, 0xfb, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xf1, 0x60, 0x39, 0xd9, 0x9a, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RestaurantServiceClient is the client API for RestaurantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RestaurantServiceClient interface {
	AddRestaurant(ctx context.Context, in *AddRestaurantReq, opts ...grpc.CallOption) (*Id, error)
	GetRestaurant(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Restaurant, error)
	GetRestaurants(ctx context.Context, in *Empty, opts ...grpc.CallOption) (RestaurantService_GetRestaurantsClient, error)
	UpdateRestaurant(ctx context.Context, in *Restaurant, opts ...grpc.CallOption) (*Id, error)
	DeleteRestaurant(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error)
}

type restaurantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRestaurantServiceClient(cc grpc.ClientConnInterface) RestaurantServiceClient {
	return &restaurantServiceClient{cc}
}

func (c *restaurantServiceClient) AddRestaurant(ctx context.Context, in *AddRestaurantReq, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantService/AddRestaurant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantServiceClient) GetRestaurant(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Restaurant, error) {
	out := new(Restaurant)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantService/GetRestaurant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantServiceClient) GetRestaurants(ctx context.Context, in *Empty, opts ...grpc.CallOption) (RestaurantService_GetRestaurantsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RestaurantService_serviceDesc.Streams[0], "/restaurant.RestaurantService/GetRestaurants", opts...)
	if err != nil {
		return nil, err
	}
	x := &restaurantServiceGetRestaurantsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RestaurantService_GetRestaurantsClient interface {
	Recv() (*Restaurant, error)
	grpc.ClientStream
}

type restaurantServiceGetRestaurantsClient struct {
	grpc.ClientStream
}

func (x *restaurantServiceGetRestaurantsClient) Recv() (*Restaurant, error) {
	m := new(Restaurant)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *restaurantServiceClient) UpdateRestaurant(ctx context.Context, in *Restaurant, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantService/UpdateRestaurant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantServiceClient) DeleteRestaurant(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantService/DeleteRestaurant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RestaurantServiceServer is the server API for RestaurantService service.
type RestaurantServiceServer interface {
	AddRestaurant(context.Context, *AddRestaurantReq) (*Id, error)
	GetRestaurant(context.Context, *Id) (*Restaurant, error)
	GetRestaurants(*Empty, RestaurantService_GetRestaurantsServer) error
	UpdateRestaurant(context.Context, *Restaurant) (*Id, error)
	DeleteRestaurant(context.Context, *Id) (*Id, error)
}

// UnimplementedRestaurantServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRestaurantServiceServer struct {
}

func (*UnimplementedRestaurantServiceServer) AddRestaurant(ctx context.Context, req *AddRestaurantReq) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRestaurant not implemented")
}
func (*UnimplementedRestaurantServiceServer) GetRestaurant(ctx context.Context, req *Id) (*Restaurant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestaurant not implemented")
}
func (*UnimplementedRestaurantServiceServer) GetRestaurants(req *Empty, srv RestaurantService_GetRestaurantsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRestaurants not implemented")
}
func (*UnimplementedRestaurantServiceServer) UpdateRestaurant(ctx context.Context, req *Restaurant) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRestaurant not implemented")
}
func (*UnimplementedRestaurantServiceServer) DeleteRestaurant(ctx context.Context, req *Id) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRestaurant not implemented")
}

func RegisterRestaurantServiceServer(s *grpc.Server, srv RestaurantServiceServer) {
	s.RegisterService(&_RestaurantService_serviceDesc, srv)
}

func _RestaurantService_AddRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRestaurantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).AddRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantService/AddRestaurant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).AddRestaurant(ctx, req.(*AddRestaurantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantService_GetRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).GetRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantService/GetRestaurant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).GetRestaurant(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantService_GetRestaurants_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RestaurantServiceServer).GetRestaurants(m, &restaurantServiceGetRestaurantsServer{stream})
}

type RestaurantService_GetRestaurantsServer interface {
	Send(*Restaurant) error
	grpc.ServerStream
}

type restaurantServiceGetRestaurantsServer struct {
	grpc.ServerStream
}

func (x *restaurantServiceGetRestaurantsServer) Send(m *Restaurant) error {
	return x.ServerStream.SendMsg(m)
}

func _RestaurantService_UpdateRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Restaurant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).UpdateRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantService/UpdateRestaurant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).UpdateRestaurant(ctx, req.(*Restaurant))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantService_DeleteRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).DeleteRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantService/DeleteRestaurant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).DeleteRestaurant(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _RestaurantService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "restaurant.RestaurantService",
	HandlerType: (*RestaurantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRestaurant",
			Handler:    _RestaurantService_AddRestaurant_Handler,
		},
		{
			MethodName: "GetRestaurant",
			Handler:    _RestaurantService_GetRestaurant_Handler,
		},
		{
			MethodName: "UpdateRestaurant",
			Handler:    _RestaurantService_UpdateRestaurant_Handler,
		},
		{
			MethodName: "DeleteRestaurant",
			Handler:    _RestaurantService_DeleteRestaurant_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRestaurants",
			Handler:       _RestaurantService_GetRestaurants_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "restaurant.proto",
}
