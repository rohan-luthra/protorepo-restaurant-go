// Code generated by protoc-gen-go. DO NOT EDIT.
// source: restaurant_group.proto

package restaurant

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RestaurantGroupType int32

const (
	RestaurantGroupType_MALL      RestaurantGroupType = 0
	RestaurantGroupType_FRANCHISE RestaurantGroupType = 1
)

var RestaurantGroupType_name = map[int32]string{
	0: "MALL",
	1: "FRANCHISE",
}

var RestaurantGroupType_value = map[string]int32{
	"MALL":      0,
	"FRANCHISE": 1,
}

func (x RestaurantGroupType) String() string {
	return proto.EnumName(RestaurantGroupType_name, int32(x))
}

func (RestaurantGroupType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d46e0acd4ce2f6dd, []int{0}
}

type RestaurantGroup struct {
	Id                   string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Username             string                     `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Hasword              string                     `protobuf:"bytes,3,opt,name=hasword,proto3" json:"hasword,omitempty"`
	HashwordSalt         int32                      `protobuf:"varint,4,opt,name=hashword_salt,json=hashwordSalt,proto3" json:"hashword_salt,omitempty"`
	Contacts             []*RestaurantGroup_Contact `protobuf:"bytes,5,rep,name=contacts,proto3" json:"contacts,omitempty"`
	PersonOfContact      string                     `protobuf:"bytes,6,opt,name=person_of_contact,json=personOfContact,proto3" json:"person_of_contact,omitempty"`
	Restaurants          []*RestId                  `protobuf:"bytes,7,rep,name=restaurants,proto3" json:"restaurants,omitempty"`
	CreatedAt            *timestamp.Timestamp       `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamp.Timestamp       `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *RestaurantGroup) Reset()         { *m = RestaurantGroup{} }
func (m *RestaurantGroup) String() string { return proto.CompactTextString(m) }
func (*RestaurantGroup) ProtoMessage()    {}
func (*RestaurantGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_d46e0acd4ce2f6dd, []int{0}
}

func (m *RestaurantGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestaurantGroup.Unmarshal(m, b)
}
func (m *RestaurantGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestaurantGroup.Marshal(b, m, deterministic)
}
func (m *RestaurantGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestaurantGroup.Merge(m, src)
}
func (m *RestaurantGroup) XXX_Size() int {
	return xxx_messageInfo_RestaurantGroup.Size(m)
}
func (m *RestaurantGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_RestaurantGroup.DiscardUnknown(m)
}

var xxx_messageInfo_RestaurantGroup proto.InternalMessageInfo

func (m *RestaurantGroup) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RestaurantGroup) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RestaurantGroup) GetHasword() string {
	if m != nil {
		return m.Hasword
	}
	return ""
}

func (m *RestaurantGroup) GetHashwordSalt() int32 {
	if m != nil {
		return m.HashwordSalt
	}
	return 0
}

func (m *RestaurantGroup) GetContacts() []*RestaurantGroup_Contact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *RestaurantGroup) GetPersonOfContact() string {
	if m != nil {
		return m.PersonOfContact
	}
	return ""
}

func (m *RestaurantGroup) GetRestaurants() []*RestId {
	if m != nil {
		return m.Restaurants
	}
	return nil
}

func (m *RestaurantGroup) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *RestaurantGroup) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type RestaurantGroup_Contact struct {
	PhoneNumber          string   `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Email                string   `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestaurantGroup_Contact) Reset()         { *m = RestaurantGroup_Contact{} }
func (m *RestaurantGroup_Contact) String() string { return proto.CompactTextString(m) }
func (*RestaurantGroup_Contact) ProtoMessage()    {}
func (*RestaurantGroup_Contact) Descriptor() ([]byte, []int) {
	return fileDescriptor_d46e0acd4ce2f6dd, []int{0, 0}
}

func (m *RestaurantGroup_Contact) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestaurantGroup_Contact.Unmarshal(m, b)
}
func (m *RestaurantGroup_Contact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestaurantGroup_Contact.Marshal(b, m, deterministic)
}
func (m *RestaurantGroup_Contact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestaurantGroup_Contact.Merge(m, src)
}
func (m *RestaurantGroup_Contact) XXX_Size() int {
	return xxx_messageInfo_RestaurantGroup_Contact.Size(m)
}
func (m *RestaurantGroup_Contact) XXX_DiscardUnknown() {
	xxx_messageInfo_RestaurantGroup_Contact.DiscardUnknown(m)
}

var xxx_messageInfo_RestaurantGroup_Contact proto.InternalMessageInfo

func (m *RestaurantGroup_Contact) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *RestaurantGroup_Contact) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *RestaurantGroup_Contact) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterEnum("restaurant.RestaurantGroupType", RestaurantGroupType_name, RestaurantGroupType_value)
	proto.RegisterType((*RestaurantGroup)(nil), "restaurant.RestaurantGroup")
	proto.RegisterType((*RestaurantGroup_Contact)(nil), "restaurant.RestaurantGroup.Contact")
}

func init() {
	proto.RegisterFile("restaurant_group.proto", fileDescriptor_d46e0acd4ce2f6dd)
}

var fileDescriptor_d46e0acd4ce2f6dd = []byte{
	// 466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xc5, 0xf9, 0x68, 0x92, 0x71, 0x3f, 0xd2, 0x29, 0x44, 0x2b, 0x83, 0x44, 0xa0, 0x97, 0xa8,
	0x07, 0xb7, 0x0a, 0x5c, 0x38, 0x21, 0xab, 0x94, 0x34, 0x52, 0x29, 0x92, 0x53, 0xb8, 0x5a, 0x1b,
	0xef, 0x26, 0xb1, 0x14, 0x7b, 0xad, 0xdd, 0x35, 0xa8, 0x3f, 0x9a, 0x33, 0x57, 0x94, 0xb5, 0x9d,
	0x04, 0x07, 0x85, 0x43, 0x6f, 0x3b, 0x6f, 0xde, 0x7b, 0x33, 0x3b, 0x33, 0xd0, 0x93, 0x5c, 0x69,
	0x9a, 0x49, 0x9a, 0xe8, 0x60, 0x2e, 0x45, 0x96, 0xba, 0xa9, 0x14, 0x5a, 0x20, 0x6c, 0x70, 0xe7,
	0xf5, 0x5c, 0x88, 0xf9, 0x92, 0x5f, 0x9a, 0xcc, 0x34, 0x9b, 0x5d, 0xea, 0x28, 0x5e, 0x65, 0xe3,
	0x82, 0xec, 0xd8, 0x53, 0xaa, 0xa2, 0xb0, 0x08, 0xba, 0x1b, 0x65, 0x8e, 0xbc, 0xfd, 0x55, 0x87,
	0x13, 0x7f, 0x0d, 0x8e, 0x56, 0x55, 0xf0, 0x18, 0x6a, 0x11, 0x23, 0x56, 0xdf, 0x1a, 0x74, 0xfc,
	0x5a, 0xc4, 0xd0, 0x81, 0x76, 0xa6, 0xb8, 0x4c, 0x68, 0xcc, 0x49, 0xcd, 0xa0, 0xeb, 0x18, 0x09,
	0xb4, 0x16, 0x54, 0xfd, 0x14, 0x92, 0x91, 0xba, 0x49, 0x95, 0x21, 0x9e, 0xc3, 0xd1, 0x82, 0xaa,
	0xc5, 0xea, 0x1d, 0x28, 0xba, 0xd4, 0xa4, 0xd1, 0xb7, 0x06, 0x4d, 0xff, 0xb0, 0x04, 0x27, 0x74,
	0xa9, 0xf1, 0x23, 0xb4, 0x43, 0x91, 0x68, 0x1a, 0x6a, 0x45, 0x9a, 0xfd, 0xfa, 0xc0, 0x1e, 0x9e,
	0xbb, 0x5b, 0x3d, 0x56, 0x3a, 0x73, 0xaf, 0x73, 0xae, 0xbf, 0x16, 0xe1, 0x05, 0x9c, 0xa6, 0x5c,
	0x2a, 0x91, 0x04, 0x62, 0x16, 0x14, 0x28, 0x39, 0x30, 0x9d, 0x9c, 0xe4, 0x89, 0xaf, 0xb3, 0x42,
	0x85, 0xef, 0xc1, 0xde, 0x78, 0x2b, 0xd2, 0x32, 0xf5, 0xb0, 0x5a, 0x6f, 0xcc, 0xfc, 0x6d, 0x1a,
	0x7e, 0x00, 0x08, 0x25, 0xa7, 0x9a, 0xb3, 0x80, 0x6a, 0xd2, 0xee, 0x5b, 0x03, 0x7b, 0xe8, 0xb8,
	0xf9, 0xd8, 0xdd, 0x72, 0xec, 0xee, 0x43, 0x39, 0x76, 0xbf, 0x53, 0xb0, 0x3d, 0xbd, 0x92, 0x66,
	0x29, 0x2b, 0xa5, 0x9d, 0xff, 0x4b, 0x0b, 0xb6, 0xa7, 0x9d, 0xef, 0xd0, 0x2a, 0xdb, 0x7e, 0x03,
	0x87, 0xe9, 0x42, 0x24, 0x3c, 0x48, 0xb2, 0x78, 0xca, 0x65, 0xb1, 0x18, 0xdb, 0x60, 0xf7, 0x06,
	0xc2, 0xe7, 0xd0, 0xe4, 0x31, 0x8d, 0x96, 0xc5, 0x7a, 0xf2, 0x00, 0x11, 0x1a, 0x66, 0x67, 0xf9,
	0x62, 0xcc, 0xfb, 0xc2, 0x85, 0xb3, 0xca, 0x50, 0x1f, 0x1e, 0x53, 0x8e, 0x6d, 0x68, 0x7c, 0xf1,
	0xee, 0xee, 0xba, 0xcf, 0xf0, 0x08, 0x3a, 0x9f, 0x7d, 0xef, 0xfe, 0xfa, 0x76, 0x3c, 0xb9, 0xe9,
	0x5a, 0xc3, 0xdf, 0x35, 0xe8, 0x55, 0x04, 0x13, 0x2e, 0x7f, 0x44, 0x21, 0x47, 0x0f, 0xd0, 0x63,
	0xac, 0x7a, 0x3c, 0x2f, 0xf7, 0xec, 0xcf, 0x39, 0xde, 0x4e, 0x8e, 0x19, 0x7e, 0x82, 0x17, 0xdf,
	0xcc, 0x97, 0x9f, 0xe4, 0xe2, 0x01, 0x8e, 0xb8, 0xde, 0xb9, 0xe2, 0xbf, 0x59, 0xce, 0x3e, 0x4b,
	0x1c, 0xc1, 0xd9, 0xae, 0x85, 0xc2, 0xd3, 0x6d, 0xcd, 0x4d, 0x9c, 0xea, 0xc7, 0xbd, 0x36, 0x57,
	0x16, 0xde, 0xc2, 0xab, 0x5d, 0xa3, 0x4d, 0xb8, 0xd3, 0x55, 0xef, 0xdf, 0x76, 0x57, 0xd6, 0xf4,
	0xc0, 0x1c, 0xc8, 0xbb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x93, 0x24, 0x15, 0xc7, 0x06, 0x04,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RestaurantGroupServiceClient is the client API for RestaurantGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RestaurantGroupServiceClient interface {
	//*
	//Add new RestaurantGroup
	//@required: salesJwt/adminJWT
	AddRestaurantGroup(ctx context.Context, in *RestaurantGroup, opts ...grpc.CallOption) (*Id, error)
	//*
	//Update a RestaurantGroup
	//@required: restGroupJWT/salesJwt
	UpdateRestaurantGroup(ctx context.Context, in *RestaurantGroup, opts ...grpc.CallOption) (*Id, error)
	//*
	//Get RestaurantGroup
	//@required: restGroupJWT/salesJwt/opsJWT/supportJwt/adminJWT
	GetRestaurantGroup(ctx context.Context, in *Id, opts ...grpc.CallOption) (*RestaurantGroup, error)
	//*
	//Get all RestaurantGroup
	//@required: restGroupJWT/salesJwt/opsJWT/supportJwt/adminJWT
	GetRestaurantGroups(ctx context.Context, in *Empty, opts ...grpc.CallOption) (RestaurantGroupService_GetRestaurantGroupsClient, error)
	//*
	//Get all Restaurant for RestaurantGroup
	//@required: restGroupJWT/salesJwt/opsJWT/supportJwt/adminJWT
	GetRestaurantGroupRestaurant(ctx context.Context, in *Id, opts ...grpc.CallOption) (RestaurantGroupService_GetRestaurantGroupRestaurantClient, error)
}

type restaurantGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRestaurantGroupServiceClient(cc grpc.ClientConnInterface) RestaurantGroupServiceClient {
	return &restaurantGroupServiceClient{cc}
}

func (c *restaurantGroupServiceClient) AddRestaurantGroup(ctx context.Context, in *RestaurantGroup, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantGroupService/AddRestaurantGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantGroupServiceClient) UpdateRestaurantGroup(ctx context.Context, in *RestaurantGroup, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantGroupService/UpdateRestaurantGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantGroupServiceClient) GetRestaurantGroup(ctx context.Context, in *Id, opts ...grpc.CallOption) (*RestaurantGroup, error) {
	out := new(RestaurantGroup)
	err := c.cc.Invoke(ctx, "/restaurant.RestaurantGroupService/GetRestaurantGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantGroupServiceClient) GetRestaurantGroups(ctx context.Context, in *Empty, opts ...grpc.CallOption) (RestaurantGroupService_GetRestaurantGroupsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RestaurantGroupService_serviceDesc.Streams[0], "/restaurant.RestaurantGroupService/GetRestaurantGroups", opts...)
	if err != nil {
		return nil, err
	}
	x := &restaurantGroupServiceGetRestaurantGroupsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RestaurantGroupService_GetRestaurantGroupsClient interface {
	Recv() (*RestaurantGroup, error)
	grpc.ClientStream
}

type restaurantGroupServiceGetRestaurantGroupsClient struct {
	grpc.ClientStream
}

func (x *restaurantGroupServiceGetRestaurantGroupsClient) Recv() (*RestaurantGroup, error) {
	m := new(RestaurantGroup)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *restaurantGroupServiceClient) GetRestaurantGroupRestaurant(ctx context.Context, in *Id, opts ...grpc.CallOption) (RestaurantGroupService_GetRestaurantGroupRestaurantClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RestaurantGroupService_serviceDesc.Streams[1], "/restaurant.RestaurantGroupService/GetRestaurantGroupRestaurant", opts...)
	if err != nil {
		return nil, err
	}
	x := &restaurantGroupServiceGetRestaurantGroupRestaurantClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RestaurantGroupService_GetRestaurantGroupRestaurantClient interface {
	Recv() (*Restaurant, error)
	grpc.ClientStream
}

type restaurantGroupServiceGetRestaurantGroupRestaurantClient struct {
	grpc.ClientStream
}

func (x *restaurantGroupServiceGetRestaurantGroupRestaurantClient) Recv() (*Restaurant, error) {
	m := new(Restaurant)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RestaurantGroupServiceServer is the server API for RestaurantGroupService service.
type RestaurantGroupServiceServer interface {
	//*
	//Add new RestaurantGroup
	//@required: salesJwt/adminJWT
	AddRestaurantGroup(context.Context, *RestaurantGroup) (*Id, error)
	//*
	//Update a RestaurantGroup
	//@required: restGroupJWT/salesJwt
	UpdateRestaurantGroup(context.Context, *RestaurantGroup) (*Id, error)
	//*
	//Get RestaurantGroup
	//@required: restGroupJWT/salesJwt/opsJWT/supportJwt/adminJWT
	GetRestaurantGroup(context.Context, *Id) (*RestaurantGroup, error)
	//*
	//Get all RestaurantGroup
	//@required: restGroupJWT/salesJwt/opsJWT/supportJwt/adminJWT
	GetRestaurantGroups(*Empty, RestaurantGroupService_GetRestaurantGroupsServer) error
	//*
	//Get all Restaurant for RestaurantGroup
	//@required: restGroupJWT/salesJwt/opsJWT/supportJwt/adminJWT
	GetRestaurantGroupRestaurant(*Id, RestaurantGroupService_GetRestaurantGroupRestaurantServer) error
}

// UnimplementedRestaurantGroupServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRestaurantGroupServiceServer struct {
}

func (*UnimplementedRestaurantGroupServiceServer) AddRestaurantGroup(ctx context.Context, req *RestaurantGroup) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRestaurantGroup not implemented")
}
func (*UnimplementedRestaurantGroupServiceServer) UpdateRestaurantGroup(ctx context.Context, req *RestaurantGroup) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRestaurantGroup not implemented")
}
func (*UnimplementedRestaurantGroupServiceServer) GetRestaurantGroup(ctx context.Context, req *Id) (*RestaurantGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestaurantGroup not implemented")
}
func (*UnimplementedRestaurantGroupServiceServer) GetRestaurantGroups(req *Empty, srv RestaurantGroupService_GetRestaurantGroupsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRestaurantGroups not implemented")
}
func (*UnimplementedRestaurantGroupServiceServer) GetRestaurantGroupRestaurant(req *Id, srv RestaurantGroupService_GetRestaurantGroupRestaurantServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRestaurantGroupRestaurant not implemented")
}

func RegisterRestaurantGroupServiceServer(s *grpc.Server, srv RestaurantGroupServiceServer) {
	s.RegisterService(&_RestaurantGroupService_serviceDesc, srv)
}

func _RestaurantGroupService_AddRestaurantGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestaurantGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantGroupServiceServer).AddRestaurantGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantGroupService/AddRestaurantGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantGroupServiceServer).AddRestaurantGroup(ctx, req.(*RestaurantGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantGroupService_UpdateRestaurantGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestaurantGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantGroupServiceServer).UpdateRestaurantGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantGroupService/UpdateRestaurantGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantGroupServiceServer).UpdateRestaurantGroup(ctx, req.(*RestaurantGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantGroupService_GetRestaurantGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantGroupServiceServer).GetRestaurantGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.RestaurantGroupService/GetRestaurantGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantGroupServiceServer).GetRestaurantGroup(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantGroupService_GetRestaurantGroups_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RestaurantGroupServiceServer).GetRestaurantGroups(m, &restaurantGroupServiceGetRestaurantGroupsServer{stream})
}

type RestaurantGroupService_GetRestaurantGroupsServer interface {
	Send(*RestaurantGroup) error
	grpc.ServerStream
}

type restaurantGroupServiceGetRestaurantGroupsServer struct {
	grpc.ServerStream
}

func (x *restaurantGroupServiceGetRestaurantGroupsServer) Send(m *RestaurantGroup) error {
	return x.ServerStream.SendMsg(m)
}

func _RestaurantGroupService_GetRestaurantGroupRestaurant_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Id)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RestaurantGroupServiceServer).GetRestaurantGroupRestaurant(m, &restaurantGroupServiceGetRestaurantGroupRestaurantServer{stream})
}

type RestaurantGroupService_GetRestaurantGroupRestaurantServer interface {
	Send(*Restaurant) error
	grpc.ServerStream
}

type restaurantGroupServiceGetRestaurantGroupRestaurantServer struct {
	grpc.ServerStream
}

func (x *restaurantGroupServiceGetRestaurantGroupRestaurantServer) Send(m *Restaurant) error {
	return x.ServerStream.SendMsg(m)
}

var _RestaurantGroupService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "restaurant.RestaurantGroupService",
	HandlerType: (*RestaurantGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRestaurantGroup",
			Handler:    _RestaurantGroupService_AddRestaurantGroup_Handler,
		},
		{
			MethodName: "UpdateRestaurantGroup",
			Handler:    _RestaurantGroupService_UpdateRestaurantGroup_Handler,
		},
		{
			MethodName: "GetRestaurantGroup",
			Handler:    _RestaurantGroupService_GetRestaurantGroup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRestaurantGroups",
			Handler:       _RestaurantGroupService_GetRestaurantGroups_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRestaurantGroupRestaurant",
			Handler:       _RestaurantGroupService_GetRestaurantGroupRestaurant_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "restaurant_group.proto",
}
