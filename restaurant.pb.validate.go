// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: restaurant.proto

package restaurant

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _restaurant_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Payment with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Payment) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Gstin

	// no validation rules for Pan

	// no validation rules for Upi

	// no validation rules for BankName

	// no validation rules for AccountName

	// no validation rules for AccountNumber

	// no validation rules for Ifsc

	return nil
}

// PaymentValidationError is the validation error returned by Payment.Validate
// if the designated constraints aren't met.
type PaymentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentValidationError) ErrorName() string { return "PaymentValidationError" }

// Error satisfies the builtin error interface
func (e PaymentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentValidationError{}

// Validate checks the field values on Slot with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Slot) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for StartTime

	// no validation rules for EndTime

	return nil
}

// SlotValidationError is the validation error returned by Slot.Validate if the
// designated constraints aren't met.
type SlotValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SlotValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SlotValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SlotValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SlotValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SlotValidationError) ErrorName() string { return "SlotValidationError" }

// Error satisfies the builtin error interface
func (e SlotValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSlot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SlotValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SlotValidationError{}

// Validate checks the field values on Timings with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Timings) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Day

	for idx, item := range m.GetSlots() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TimingsValidationError{
					field:  fmt.Sprintf("Slots[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TimingsValidationError is the validation error returned by Timings.Validate
// if the designated constraints aren't met.
type TimingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimingsValidationError) ErrorName() string { return "TimingsValidationError" }

// Error satisfies the builtin error interface
func (e TimingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimingsValidationError{}

// Validate checks the field values on Address with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Address) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Line1

	// no validation rules for Line2

	// no validation rules for City

	// no validation rules for CityId

	// no validation rules for State

	// no validation rules for Country

	// no validation rules for CountryId

	// no validation rules for Pincode

	// no validation rules for GeoLatitude

	// no validation rules for GeoLongitude

	// no validation rules for Timezone

	return nil
}

// AddressValidationError is the validation error returned by Address.Validate
// if the designated constraints aren't met.
type AddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressValidationError) ErrorName() string { return "AddressValidationError" }

// Error satisfies the builtin error interface
func (e AddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressValidationError{}

// Validate checks the field values on Restaurant with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Restaurant) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RestaurantValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Username

	// no validation rules for Hashword

	// no validation rules for HashwordSalt

	for idx, item := range m.GetContacts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RestaurantValidationError{
					field:  fmt.Sprintf("Contacts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PersonOfContact

	// no validation rules for Logo

	// no validation rules for ProfileImage

	// no validation rules for Active

	if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RestaurantValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTimings() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RestaurantValidationError{
					field:  fmt.Sprintf("Timings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SubscriptionPlan

	// no validation rules for SubscriptionPrice

	if v, ok := interface{}(m.GetCurreny()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RestaurantValidationError{
				field:  "Curreny",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AssignedSalesEmpId

	// no validation rules for AssignedOpsEmpId

	// no validation rules for TrialDays

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RestaurantValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RestaurantValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RestaurantValidationError is the validation error returned by
// Restaurant.Validate if the designated constraints aren't met.
type RestaurantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestaurantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestaurantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestaurantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestaurantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestaurantValidationError) ErrorName() string { return "RestaurantValidationError" }

// Error satisfies the builtin error interface
func (e RestaurantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestaurant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestaurantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestaurantValidationError{}

// Validate checks the field values on AddRestaurantReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddRestaurantReq) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddRestaurantReqValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for ContactNumber

	// no validation rules for PersonOfContact

	// no validation rules for Logo

	// no validation rules for ProfileImage

	// no validation rules for Active

	if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddRestaurantReqValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTimings() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddRestaurantReqValidationError{
					field:  fmt.Sprintf("Timings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SubscriptionPlan

	// no validation rules for SubscriptionPrice

	// no validation rules for DefaultCurrenyId

	return nil
}

// AddRestaurantReqValidationError is the validation error returned by
// AddRestaurantReq.Validate if the designated constraints aren't met.
type AddRestaurantReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRestaurantReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRestaurantReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRestaurantReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRestaurantReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRestaurantReqValidationError) ErrorName() string { return "AddRestaurantReqValidationError" }

// Error satisfies the builtin error interface
func (e AddRestaurantReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRestaurantReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRestaurantReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRestaurantReqValidationError{}

// Validate checks the field values on Restaurant_Contact with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Restaurant_Contact) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PhoneNumber

	// no validation rules for Email

	// no validation rules for Name

	return nil
}

// Restaurant_ContactValidationError is the validation error returned by
// Restaurant_Contact.Validate if the designated constraints aren't met.
type Restaurant_ContactValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Restaurant_ContactValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Restaurant_ContactValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Restaurant_ContactValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Restaurant_ContactValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Restaurant_ContactValidationError) ErrorName() string {
	return "Restaurant_ContactValidationError"
}

// Error satisfies the builtin error interface
func (e Restaurant_ContactValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestaurant_Contact.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Restaurant_ContactValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Restaurant_ContactValidationError{}
